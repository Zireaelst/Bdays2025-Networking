class ModalManager {
    constructor() {
        this.modal = document.getElementById('registration-modal');
        this.form = document.getElementById('registration-form');
        this.setupEventListeners();
    }

    setupEventListeners() {
        this.form.addEventListener('submit', this.handleSubmit.bind(this));
        
        // Add input validation
        const inputs = this.form.querySelectorAll('input');
        inputs.forEach(input => {
            input.addEventListener('input', () => this.validateInput(input));
            input.addEventListener('blur', () => this.validateInput(input));
        });
    }

    validateInput(input) {
        const value = input.value.trim();
        let isValid = true;
        let errorMessage = '';

        // Skip validation for empty optional fields (phone and linkedin)
        if ((input.id === 'phone' || input.id === 'linkedin') && value === '') {
            this.toggleError(input, '');
            return true;
        }

        switch(input.id) {
            case 'email':
                isValid = VALIDATION.EMAIL_REGEX.test(value);
                errorMessage = 'Geçerli bir e-posta adresi giriniz';
                break;
            case 'phone':
                isValid = VALIDATION.PHONE_REGEX.test(value);
                errorMessage = 'Geçerli bir telefon numarası giriniz';
                break;
            case 'linkedin':
                isValid = VALIDATION.LINKEDIN_REGEX.test(value);
                errorMessage = 'Geçerli bir LinkedIn URL\'si giriniz';
                break;
            case 'name':
                isValid = value.length >= 3;
                errorMessage = 'İsim en az 3 karakter olmalıdır';
                break;
        }

        this.toggleError(input, isValid ? '' : errorMessage);
        return isValid;
    }

    toggleError(input, errorMessage) {
        const formGroup = input.closest('.form-group');
        const existingError = formGroup.querySelector('.error-message');
        
        if (errorMessage) {
            formGroup.classList.add('error');
            if (!existingError) {
                const errorElement = document.createElement('span');
                errorElement.className = 'error-message';
                errorElement.textContent = errorMessage;
                formGroup.appendChild(errorElement);
            } else {
                existingError.textContent = errorMessage;
            }
        } else {
            formGroup.classList.remove('error');
            if (existingError) {
                existingError.remove();
            }
        }
    }

    async handleSubmit(e) {
        e.preventDefault();

        // Only validate required fields (name and email)
        const requiredInputs = this.form.querySelectorAll('#name, #email');
        let isValid = true;

        // Validate required inputs
        requiredInputs.forEach(input => {
            if (!this.validateInput(input)) {
                isValid = false;
            }
        });

        // Also validate non-empty optional fields
        const optionalInputs = this.form.querySelectorAll('#phone, #linkedin');
        optionalInputs.forEach(input => {
            if (input.value.trim() !== '' && !this.validateInput(input)) {
                isValid = false;
            }
        });

        if (!isValid) {
            NotificationManager.error('Lütfen tüm alanları doğru şekilde doldurun');
            return;
        }

        // Show loading indicator
        const submitButton = this.form.querySelector('button[type="submit"]');
        const originalButtonText = submitButton.innerHTML;
        submitButton.innerHTML = 'Kaydediliyor...';
        submitButton.disabled = true;

        try {
            const formData = {
                name: this.form.querySelector('#name').value,
                email: this.form.querySelector('#email').value,
                phone: this.form.querySelector('#phone').value,
                linkedin: this.form.querySelector('#linkedin').value
            };

            // Register user with the API service
            const response = await LocalApiService.registerUser(formData);

            if (!response.success) {
                throw new Error(response.error);
            }

            // Save user data locally
            StorageManager.saveUserData(response.user);

            // Hide modal and show main app
            this.hide();
            document.getElementById('app').classList.remove('hidden');
            
            // Update UI
            ProfileManager.updateProfile();
            
            // Display the QR code generated by the service
            const qrContainer = document.getElementById('user-qr');
            const qrImage = document.createElement('img');
            qrImage.src = response.qrCode;
            qrImage.alt = 'Your QR Code';
            qrImage.className = 'scale-in';
            
            qrContainer.innerHTML = '';
            qrContainer.appendChild(qrImage);
            
            // Update leaderboard
            LeaderboardManager.updateLeaderboard();

            NotificationManager.success('Kayıt başarıyla tamamlandı!');
        } catch (error) {
            NotificationManager.error(error.message || 'Kayıt sırasında bir hata oluştu');
        } finally {
            // Reset button state
            submitButton.innerHTML = originalButtonText;
            submitButton.disabled = false;
        }
    }

    show() {
        this.modal.classList.add('active');
    }

    hide() {
        this.modal.classList.remove('active');
    }
}

// Initialize modal manager
const modalManager = new ModalManager(); 